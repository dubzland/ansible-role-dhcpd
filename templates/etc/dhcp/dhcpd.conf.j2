# {{ ansible_managed }}

authoritative;
ddns-updates on;
ddns-update-style interim;

{# FAILOVERS #}
{% if dubzland_dhcpd_failovers is defined and dubzland_dhcpd_failovers %}
{% for failover in dubzland_dhcpd_failovers %}
failover peer "{{ failover.name }}" {
{% if failover.primary is defined and failover.primary in ansible_all_ipv4_addresses | d([]) %}
	primary;
	address {{ failover.primary }};
	peer address {{ failover.secondary }};
	mclt {{ failover.mclt | default(3600) }};
{% if failover.split is defined and failover.split %}
	split {{ failover.split }};
{% endif %}
{% else %}
	secondary;
	address {{ failover.secondary }};
	peer address {{ failover.primary }};
{% endif %}
	max-response-delay {{ failover.max_response_delay | default(30) }};
	max-unacked-updates {{ failover.max_unacked_updates | default(10) }};
{% if failover.load_balance_max_seconds is defined and failover.load_balance_max_seconds %}
	load balance max seconds {{ failover.load_balance_max_seconds }};
{% endif %}
}
{% endfor %}
{% endif %}

{# DYNAMIC DNS KEYS #}
{% if dubzland_dhcpd_keys is defined and dubzland_dhcpd_keys %}
{% for key in dubzland_dhcpd_keys %}
key {{ key.name }} {
	algorithm {{ key.algorithm | default('hmac-md5') }};
	secret {{ key.secret }};
}
{% endfor %}
{% endif %}

{# DYNAMIC DNS ZONES #}
{% if dubzland_dhcpd_zones is defined and dubzland_dhcpd_zones %}
{% for zone in dubzland_dhcpd_zones %}
zone {{ zone.name }} {
	primary {{ zone.primary }};
	key {{ zone.key }};
}
{% endfor %}
{% endif %}
